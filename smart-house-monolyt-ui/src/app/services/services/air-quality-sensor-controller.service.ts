/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addNewAirQualitySensor } from '../fn/air-quality-sensor-controller/add-new-air-quality-sensor';
import { AddNewAirQualitySensor$Params } from '../fn/air-quality-sensor-controller/add-new-air-quality-sensor';
import { AirQualitySensorDataResponse } from '../models/air-quality-sensor-data-response';
import { AirQualitySensorResponse } from '../models/air-quality-sensor-response';
import { findAirQualitySensorById } from '../fn/air-quality-sensor-controller/find-air-quality-sensor-by-id';
import { FindAirQualitySensorById$Params } from '../fn/air-quality-sensor-controller/find-air-quality-sensor-by-id';
import { findAllAirQualitySensors } from '../fn/air-quality-sensor-controller/find-all-air-quality-sensors';
import { FindAllAirQualitySensors$Params } from '../fn/air-quality-sensor-controller/find-all-air-quality-sensors';
import { getAllAirData } from '../fn/air-quality-sensor-controller/get-all-air-data';
import { GetAllAirData$Params } from '../fn/air-quality-sensor-controller/get-all-air-data';
import { PageResponseAirQualitySensorResponse } from '../models/page-response-air-quality-sensor-response';
import { removeAirQualitySensor } from '../fn/air-quality-sensor-controller/remove-air-quality-sensor';
import { RemoveAirQualitySensor$Params } from '../fn/air-quality-sensor-controller/remove-air-quality-sensor';
import { sendAirData } from '../fn/air-quality-sensor-controller/send-air-data';
import { SendAirData$Params } from '../fn/air-quality-sensor-controller/send-air-data';
import { setDefaultPowerMode } from '../fn/air-quality-sensor-controller/set-default-power-mode';
import { SetDefaultPowerMode$Params } from '../fn/air-quality-sensor-controller/set-default-power-mode';
import { setLowPowerMode } from '../fn/air-quality-sensor-controller/set-low-power-mode';
import { SetLowPowerMode$Params } from '../fn/air-quality-sensor-controller/set-low-power-mode';
import { turnOffAirQualitySensor } from '../fn/air-quality-sensor-controller/turn-off-air-quality-sensor';
import { TurnOffAirQualitySensor$Params } from '../fn/air-quality-sensor-controller/turn-off-air-quality-sensor';
import { turnOnAirQualitySensor } from '../fn/air-quality-sensor-controller/turn-on-air-quality-sensor';
import { TurnOnAirQualitySensor$Params } from '../fn/air-quality-sensor-controller/turn-on-air-quality-sensor';

@Injectable({ providedIn: 'root' })
export class AirQualitySensorControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `turnOnAirQualitySensor()` */
  static readonly TurnOnAirQualitySensorPath = '/air-quality-sensor/{sensorId}/turn-on';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `turnOnAirQualitySensor()` instead.
   *
   * This method doesn't expect any request body.
   */
  turnOnAirQualitySensor$Response(params: TurnOnAirQualitySensor$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return turnOnAirQualitySensor(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `turnOnAirQualitySensor$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  turnOnAirQualitySensor(params: TurnOnAirQualitySensor$Params, context?: HttpContext): Observable<void> {
    return this.turnOnAirQualitySensor$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `turnOffAirQualitySensor()` */
  static readonly TurnOffAirQualitySensorPath = '/air-quality-sensor/{sensorId}/turn-off';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `turnOffAirQualitySensor()` instead.
   *
   * This method doesn't expect any request body.
   */
  turnOffAirQualitySensor$Response(params: TurnOffAirQualitySensor$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return turnOffAirQualitySensor(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `turnOffAirQualitySensor$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  turnOffAirQualitySensor(params: TurnOffAirQualitySensor$Params, context?: HttpContext): Observable<void> {
    return this.turnOffAirQualitySensor$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `setLowPowerMode()` */
  static readonly SetLowPowerModePath = '/air-quality-sensor/{sensorId}/low-power-mode';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `setLowPowerMode()` instead.
   *
   * This method doesn't expect any request body.
   */
  setLowPowerMode$Response(params: SetLowPowerMode$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return setLowPowerMode(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `setLowPowerMode$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  setLowPowerMode(params: SetLowPowerMode$Params, context?: HttpContext): Observable<void> {
    return this.setLowPowerMode$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `setDefaultPowerMode()` */
  static readonly SetDefaultPowerModePath = '/air-quality-sensor/{sensorId}/default-power-mode';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `setDefaultPowerMode()` instead.
   *
   * This method doesn't expect any request body.
   */
  setDefaultPowerMode$Response(params: SetDefaultPowerMode$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return setDefaultPowerMode(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `setDefaultPowerMode$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  setDefaultPowerMode(params: SetDefaultPowerMode$Params, context?: HttpContext): Observable<void> {
    return this.setDefaultPowerMode$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `findAllAirQualitySensors()` */
  static readonly FindAllAirQualitySensorsPath = '/air-quality-sensor';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllAirQualitySensors()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllAirQualitySensors$Response(params?: FindAllAirQualitySensors$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseAirQualitySensorResponse>> {
    return findAllAirQualitySensors(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllAirQualitySensors$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllAirQualitySensors(params?: FindAllAirQualitySensors$Params, context?: HttpContext): Observable<PageResponseAirQualitySensorResponse> {
    return this.findAllAirQualitySensors$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseAirQualitySensorResponse>): PageResponseAirQualitySensorResponse => r.body)
    );
  }

  /** Path part for operation `addNewAirQualitySensor()` */
  static readonly AddNewAirQualitySensorPath = '/air-quality-sensor';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addNewAirQualitySensor()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNewAirQualitySensor$Response(params: AddNewAirQualitySensor$Params, context?: HttpContext): Observable<StrictHttpResponse<AirQualitySensorResponse>> {
    return addNewAirQualitySensor(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addNewAirQualitySensor$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNewAirQualitySensor(params: AddNewAirQualitySensor$Params, context?: HttpContext): Observable<AirQualitySensorResponse> {
    return this.addNewAirQualitySensor$Response(params, context).pipe(
      map((r: StrictHttpResponse<AirQualitySensorResponse>): AirQualitySensorResponse => r.body)
    );
  }

  /** Path part for operation `getAllAirData()` */
  static readonly GetAllAirDataPath = '/air-quality-sensor/{sensorId}/air-data';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllAirData()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAirData$Response(params: GetAllAirData$Params, context?: HttpContext): Observable<StrictHttpResponse<AirQualitySensorResponse>> {
    return getAllAirData(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllAirData$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAirData(params: GetAllAirData$Params, context?: HttpContext): Observable<AirQualitySensorResponse> {
    return this.getAllAirData$Response(params, context).pipe(
      map((r: StrictHttpResponse<AirQualitySensorResponse>): AirQualitySensorResponse => r.body)
    );
  }

  /** Path part for operation `sendAirData()` */
  static readonly SendAirDataPath = '/air-quality-sensor/{sensorId}/air-data';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendAirData()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendAirData$Response(params: SendAirData$Params, context?: HttpContext): Observable<StrictHttpResponse<AirQualitySensorDataResponse>> {
    return sendAirData(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendAirData$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendAirData(params: SendAirData$Params, context?: HttpContext): Observable<AirQualitySensorDataResponse> {
    return this.sendAirData$Response(params, context).pipe(
      map((r: StrictHttpResponse<AirQualitySensorDataResponse>): AirQualitySensorDataResponse => r.body)
    );
  }

  /** Path part for operation `findAirQualitySensorById()` */
  static readonly FindAirQualitySensorByIdPath = '/air-quality-sensor/{sensorId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAirQualitySensorById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAirQualitySensorById$Response(params: FindAirQualitySensorById$Params, context?: HttpContext): Observable<StrictHttpResponse<AirQualitySensorResponse>> {
    return findAirQualitySensorById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAirQualitySensorById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAirQualitySensorById(params: FindAirQualitySensorById$Params, context?: HttpContext): Observable<AirQualitySensorResponse> {
    return this.findAirQualitySensorById$Response(params, context).pipe(
      map((r: StrictHttpResponse<AirQualitySensorResponse>): AirQualitySensorResponse => r.body)
    );
  }

  /** Path part for operation `removeAirQualitySensor()` */
  static readonly RemoveAirQualitySensorPath = '/air-quality-sensor/{sensorId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeAirQualitySensor()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeAirQualitySensor$Response(params: RemoveAirQualitySensor$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return removeAirQualitySensor(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeAirQualitySensor$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeAirQualitySensor(params: RemoveAirQualitySensor$Params, context?: HttpContext): Observable<void> {
    return this.removeAirQualitySensor$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
